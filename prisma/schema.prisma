generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  username          String             @unique
  email             String             @unique
  password          String             // Hashed password
  fullName          String
  avatar            String?
  bio               String?
  location          Region?
  website           String?
  phone             String?
  joinedAt          DateTime           @default(now())
  reputation        Int                @default(0)
  isVerified        Boolean            @default(true)
  isActive          Boolean            @default(true)
  role              UserRole
  lastActive        DateTime           @default(now())
  postsCount        Int                @default(0)
  commentsCount     Int                @default(0)
  projectsCount     Int                @default(0)
  eventsCount       Int                @default(0)
  servicesCount     Int                @default(0)
  opportunitiesCount Int                @default(0)
  pilotLicense      String?
  organization      String?
  experience        String?
  specializations   Json?
  certifications    Json?
  opportunities     Opportunity[]
  applications      JobApplication[]
  rsvps             rsvp[]
  resources         Resource[]
  commentLikes      CommentLike[]
  projectComments   Comment[]
  events            Event[]
  forumCommentLikes ForumCommentLike[]
  comments          ForumComment[]
  forumPostLikes    ForumPostLike[]
  posts             ForumPost[]
  projectLikes      ProjectLike[]
  projects          Project[]
  services          Service[]
  createdForms      ApplicationForm[]        // Forms created by this user
  formSubmissions   ApplicationSubmission[]  // Applications submitted by this user
  savedOpportunities SavedOpportunity[]     // Opportunities saved by this user

  @@map("users")
}

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  description String
  slug        String      @unique
  color       String
  postCount   Int         @default(0)
  lastPostAt  DateTime?
  posts       ForumPost[]

  @@map("forum_categories")
}

model ForumPost {
  id           String          @id @default(cuid())
  title        String
  content      String
  categoryId   String
  authorId     String
  tags         Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  viewsCount   Int             @default(0)
  repliesCount Int             @default(0)
  likesCount   Int             @default(0)
  lastReplyAt  DateTime?
  isPinned     Boolean         @default(false)
  isLocked     Boolean         @default(false)
  comments     ForumComment[]
  likes        ForumPostLike[]
  author       User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category     ForumCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("forum_posts")
}

model ForumComment {
  id         String             @id @default(cuid())
  content    String
  postId     String
  authorId   String
  parentId   String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  likesCount Int                @default(0)
  isEdited   Boolean            @default(false)
  likes      ForumCommentLike[]
  author     User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent     ForumComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    ForumComment[]     @relation("CommentReplies")
  post       ForumPost          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("forum_comments")
}

model ProjectCategory {
  id          String    @id @default(cuid())
  name        String
  description String
  slug        String    @unique
  icon        String    @default("üöÅ")
  color       String    @default("#3B82F6")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]

  @@map("project_categories")
}

model Project {
  id              String           @id @default(cuid())
  title           String
  description     String
  fullDescription String?
  categoryId      String?
  status          ProjectStatus
  authorId        String
  location        String?
  duration        String?
  startDate       String?
  endDate         String?
  funding         String?
  technologies    Json?
  objectives      Json?
  challenges      Json?
  outcomes        Json?
  methodology     String?
  results         String?
  teamMembers     Json?
  gallery         Json?
  resources       Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  viewsCount      Int              @default(0)
  likesCount      Int              @default(0)
  isFeatured      Boolean          @default(false)
  comments        Comment[]
  likes           ProjectLike[]
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category        ProjectCategory? @relation(fields: [categoryId], references: [id])

  @@map("projects")
}

model Comment {
  id         String        @id @default(cuid())
  content    String
  projectId  String
  authorId   String
  parentId   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  likesCount Int           @default(0)
  likes      CommentLike[]
  author     User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent     Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[]     @relation("CommentReplies")
  project    Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model ProjectLike {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_likes")
}

model ForumPostLike {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("forum_post_likes")
}

model ForumCommentLike {
  id        String       @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime     @default(now())
  comment   ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("forum_comment_likes")
}

model EventCategory {
  id          String   @id @default(cuid())
  name        String
  description String
  slug        String   @unique
  icon        String   @default("üéØ")
  color       String   @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]

  @@map("event_categories")
}

model Event {
  id                   String         @id @default(cuid())
  title                String
  description          String
  fullDescription      String?
  categoryId           String?
  startDate            DateTime
  endDate              DateTime
  location             String
  venue                String?
  capacity             Int?
  price                Float          @default(0)
  currency             String         @default("USD")
  registrationDeadline DateTime?
  organizerId          String
  isPublic             Boolean        @default(true)
  allowRegistration    Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  viewsCount           Int            @default(0)
  registeredCount      Int            @default(0)
  isPublished          Boolean        @default(false)
  isFeatured           Boolean        @default(false)
  requirements         Json?
  tags                 Json?
  speakers             Json?
  agenda               Json?
  gallery              Json?
  flyer                String?
  rsvps                rsvp[]
  category             EventCategory? @relation(fields: [categoryId], references: [id])
  organizer            User           @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  region      Region
  contact     String
  phone       String?
  email       String?
  website     String?
  services    Json?
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  isApproved  Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  providerId  String
  provider    User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String       // PDF, Video, Excel, Word, etc.
  fileSize    String?      // File size in MB, KB, etc. (calculated automatically)
  fileUpload  String?      // Original uploaded file name
  category    ResourceCategory
  isRegulation Boolean     @default(false) // Special flag for regulation resources
  downloads   Int          @default(0)
  views       Int          @default(0)
  uploadedAt  DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  uploadedBy  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resources")
}

model Opportunity {
  id               String           @id @default(cuid())
  title            String
  description      String
  company          String
  opportunityType  String
  category         String
  location         String
  salary           String?
  requirements     Json?
  isUrgent         Boolean          @default(false)
  isRemote         Boolean          @default(false)
  isActive         Boolean          @default(true)
  tabCategory      String           @default("job")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  posterId         String
  poster           User             @relation(fields: [posterId], references: [id], onDelete: Cascade)
  applications     JobApplication[]
  savedBy          SavedOpportunity[]
  applicationForm  ApplicationForm? // One-to-one relationship
}

model ApplicationForm {
  id            String                    @id @default(cuid())
  opportunityId String                    @unique
  creatorId     String                    // User who created the form
  title         String                    @default("Application Form")
  description   String?
  isActive      Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  opportunity   Opportunity               @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  creator       User                      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  fields       ApplicationFormField[]
  submissions  ApplicationSubmission[]
}

model ApplicationFormField {
  id                String                    @id @default(cuid())
  formId            String
  label             String
  type              ApplicationFieldType
  placeholder       String?
  required          Boolean                   @default(false)
  options           Json?                    // For select, radio, checkbox fields
  validation        Json?                    // Validation rules
  order             Int                      // Field order in form
  conditions        ApplicationFieldCondition[] // Conditional logic
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  form              ApplicationForm          @relation(fields: [formId], references: [id], onDelete: Cascade)
  submissions       ApplicationFieldSubmission[]
}

model ApplicationFieldCondition {
  id                String                    @id @default(cuid())
  fieldId           String
  targetFieldId     String                    // Field this condition affects
  operator          ConditionOperator         // equals, not_equals, contains, etc.
  value             String                    // Value to compare against
  action            ConditionAction           // show, hide, require, etc.
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  field             ApplicationFormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model ApplicationSubmission {
  id                String                    @id @default(cuid())
  formId            String
  applicantId       String
  status            ApplicationStatus         @default(PENDING)
  submittedAt       DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  form              ApplicationForm          @relation(fields: [formId], references: [id], onDelete: Cascade)
  applicant         User                     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  fieldSubmissions  ApplicationFieldSubmission[]
}

model ApplicationFieldSubmission {
  id                String                    @id @default(cuid())
  submissionId      String
  fieldId           String
  value             String                    // Submitted value
  createdAt         DateTime                  @default(now())
  submission        ApplicationSubmission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  field             ApplicationFormField      @relation(fields: [fieldId], references: [id], onDelete: Cascade)
}

model JobApplication {
  id            String      @id @default(cuid())
  opportunityId String
  applicantId   String
  message       String?
  createdAt     DateTime    @default(now())
  applicant     User        @relation(fields: [applicantId], references: [id])
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])
}

model SavedOpportunity {
  id            String      @id @default(cuid())
  userId        String
  opportunityId String
  savedAt       DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([userId, opportunityId])
  @@map("saved_opportunities")
}

model rsvp {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("rsvp")
}

enum UserRole {
  admin
  hobbyist
  pilot
  regulator
  student
  service_provider
}

enum ProjectStatus {
  planning
  in_progress
  completed
  on_hold
  cancelled
}

enum EventType {
  presentation
  workshop
  panel
  break
  networking
}

enum Region {
  KIGALI_NYARUGENGE
  KIGALI_KICUKIRO
  KIGALI_GASABO
  SOUTH_HUYE
  SOUTH_NYAMAGABE
  SOUTH_NYARUGURU
  SOUTH_MUHANGA
  SOUTH_KAMONYI
  SOUTH_GISAGARA
  SOUTH_NYANZA
  SOUTH_RUHANGO
  NORTH_MUSANZE
  NORTH_GICUMBI
  NORTH_RULINDO
  NORTH_BURERA
  NORTH_GAKENKE
  EAST_KAYONZA
  EAST_NGOMA
  EAST_KIREHE
  EAST_NYAGATARE
  EAST_BUGESERA
  EAST_RWAMAGANA
  EAST_GATSIBO
  WEST_RUBAVU
  WEST_RUSIZI
  WEST_NYAMASHEKE
  WEST_RUTSIRO
  WEST_KARONGI
  WEST_NGORORERO
  WEST_NYABIHU
  UNKNOWN
}

enum ApplicationFieldType {
  TEXT
  TEXTAREA
  EMAIL
  PHONE
  NUMBER
  SELECT
  RADIO
  CHECKBOX
  DATE
  FILE
  PARAGRAPH
}

enum ConditionOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  GREATER_THAN
  LESS_THAN
  IS_EMPTY
  IS_NOT_EMPTY
}

enum ConditionAction {
  SHOW
  HIDE
  REQUIRE
  MAKE_OPTIONAL
  ENABLE
  DISABLE
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum ResourceCategory {
  REGULATIONS
  SAFETY
  TEMPLATES
  TUTORIALS
  OTHER
}
